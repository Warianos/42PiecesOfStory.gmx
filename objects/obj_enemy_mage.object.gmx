<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_mage_default_right</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_enemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//variables
horizontalSpeed = 5
verticalSpeed   = 4
currentNShields = 6
nOfShields      = 6
isBat           = false
initialHP       = 5
hp              = 5
dir             = 0
radiusToShield  = 50
inc             = (2*pi/nOfShields)*180/pi
orbitSpeed      = 4
offScreen       = false
mageExplosionSpeed   = 20
enemyBeingAttacked   = spr_cry_girl
frostAttackTimer     = room_speed * 3 
stoppedWhileAttTimer = room_speed * 2

//initial position and velocity
x         = room_width - room_width/4
y         = room_height - room_height/4

//stages definition
stage[0]     = "wolves"
stage[1]     = "wolvesToShields"
stage[2]     = "shields"
stage[3]     = "shieldsToFinal"
stage[4]     = "final"

currentRoom = room_get_name(room)
currentStage = stage[0]

switch(currentRoom)
{
    case "room_MageWolves":
        currentStage = stage[0]     
        break
    case "room_MageShields":
        currentStage = stage[2]
        break
    case "room_MageFinal":
        currentStage = stage[4]
        break
}
WolvesStageNotClear = true
ShieldStageNotClear = true
FinalStageNotClear  = true

invincibility = true

if(currentStage != "final")
    invincibility = true
else 
    invincibility = false

//hovering factors
hoverFactorX   = 20
hoverFactorY   = 10 
hoverAscending = true
hoverTimer     = max_fps * 1.5

//shield stage variables and inits
movementDir       = 30
wallHitted        = false
bounceAngle       = -1
randomMoveTimer   = room_speed * 3
restFromCollision = false

if(currentStage == "wolves")
{
    //wolves stage variables
    alarm[0]        = hoverTimer
    currentWolfWave = 0
    nWolvesWaves    = 1
    nWolvesAlive    = 0
    nWolvesPerWave  = 3
}
//shields initialization
//0 = right, 90 = up
else if(currentStage == "shields" || currentStage == "final")
{
    direction = irandom(359)
    hspeed    = horizontalSpeed
    vspeed    = verticalSpeed
    alarm[1] = randomMoveTimer
}    

if(currentStage == "shields" || currentStage == "wolves")
{
    //aux var for creation of shields
    auxIndex = 0
    for(i = 0; i &lt; nOfShields; i++)
        {
        shieldX = x + cos(dir) * radiusToShield
        shieldY = y + sin(dir) * radiusToShield
        var shield = instance_create(shieldX, shieldY, obj_enemy_orb_shield)
        auxIndex = i
        with(shield)
        {
            place = other.auxIndex * other.inc 
        }
        dir = dir + inc
    }
}
//variables for final stage
nOfFrostAttacks       = 2
blizzardIncoming      = false
blizzardIncomingTimer = room_speed
if(currentStage == "final")
{
    alarm[4] = frostAttackTimer
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>signal     = irandom(1)
randomTurn = irandom(5)
//mage will turn randomly 50% of the time, after attacking
if(randomTurn &lt;= 2)
{
    vspeed = verticalSpeed
    hspeed = horizontalSpeed
    direction = direction - irandom(180)
}
else
{
    if(signal == 1)
    {
        vspeed = - verticalSpeed
        hspeed = - horizontalSpeed
    }
    else 
    {
        vspeed = verticalSpeed
        hspeed = horizontalSpeed
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//call frostAttack timer
alarm[4] = frostAttackTimer
if(!blizzardIncoming)
script_execute(MageFrostAttack)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>invincibility = false
sprite_index  = spr_target
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//called to destroy the mage
instance_destroy()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//change the direction of the mage randomly
if(ShieldStageNotClear &amp;&amp; currentStage == "shields"){
    signal = irandom(1)
    if(signal == 0)
        direction = direction + irandom(90)
    else 
        direction = direction - irandom(90)
    alarm[1]=randomMoveTimer
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(hoverAscending == true)
    hoverAscending = false
else 
    hoverAscending = true
if(currentStage == "wolves")
    alarm[0] = hoverTimer
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//wolves stage
if(currentStage == "wolves")
{
    //check if there are wolfs, and in which wave we are in.
    
    if(currentWolfWave &lt; nWolvesWaves)
    {
        if(nWolvesAlive &lt;= 0)
        {
            for(i = 0; i &lt; nWolvesPerWave; i++)
                instance_create(room_width/2, room_height/2 + i * 60, obj_enemy_wolf)
            currentWolfWave++ 
        }
    }
    //if we are in the last wave and there are no more wolfs
    //the mage will move to the next room
    else 
    {
        if(nWolvesAlive == 0)
        {
            WolvesStageNotClear          = false
            currentStage                 = stage[1]
            obj_warp_gate.areaUnlocked   = true
            obj_warp_gate.visible        = true
            obj_warp_gate.image_speed    = 12
            obj_warp_gate.alarm[0]       = room_speed
            
        }
    }
    //update the position of the mage so that it looks like he is hovering
    //he switchs between 'ascends' and 'descends' in hoverTimer *see Create event for this value*
    hoverIncX = hoverFactorX / max_fps
    hoverIncY = hoverFactorY / max_fps
    if(hoverAscending)
    {
        x = x + hoverIncX
        y = y - hoverIncY
    }
    else
    {
        x = x - hoverIncX
        y = y + hoverIncY
    } 
}
//transition to shield stage
else if(currentStage == "wolvesToShields")
{
    if(offScreen)
    {
        instance_destroy()
    }
    if(x &lt;= room_width + sprite_get_width(sprite_index) + 2)
    {
        x = x+2
    }
    else offScreen = true
}
//shield stage
else if(currentStage == "shields")
{
    if(currentNShields &lt;= 0)
    {
        ShieldStageNotClear          = false
        currentStage                 = stage[3]
        obj_warp_gate.areaUnlocked   = true
        obj_warp_gate.visible        = true
        obj_warp_gate.image_speed    = 12
        obj_warp_gate.alarm[0]       = room_speed
    }
}
//transition to final stage
else if(currentStage == "shieldsToFinal")
{
    if(offScreen)
    {
        instance_destroy()
    }
    if(x &lt;= room_width + sprite_get_width(sprite_index) + 2)
    {
        vspeed = 0
        hspeed = 3
    }
    else offScreen = true
}
//final stage
else if(currentStage == "final")
{
    if(hp &lt;= 0)
    {
        
        //unlock warp to next Room
    } 
    if(!blizzardIncoming)
    {
        //after every 3 frost attacks, a blizzard shall be called
        if(!(nOfFrostAttacks &lt; 3))
        {
            blizzardIncoming = true
            script_execute(MageBlizzard)
            nOfFrostAttacks  = 0
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_collision_neutral">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//these verifications are needed because at the end of the stages 
//'wolves' and 'shields' the mage is supposed to go through the wall
//on the right side of the screen
if(currentStage == "wolves" &amp;&amp; WolvesStageNotClear)
    event_inherited()
if(currentStage == "shields" &amp;&amp; ShieldStageNotClear)
    event_inherited()
if(currentStage == "final")
    event_inherited()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_sword_hit">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!invincibility)
{
   /* invincibility = true
    hp--*/
    if(hp &lt;= 0)
    {
        image_speed  = explosionSpeed
        sprite_index = spr_orb_explode
        alarm[2]     = explosionSpeed + 1
    } 
    /*else if(currentHP &lt;= initialHP/2)
    {
        sprite_index = spr_orb_weak
        alarm[1]     = room_speed
    } */
    alarm[3] = room_speed * 2/3
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
